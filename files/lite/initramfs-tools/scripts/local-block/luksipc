#!/bin/sh
# shellcheck disable=SC2003
# resize partition table script
# install in initramfs-tools/scripts/local-premount

PREREQ="resize-parttbl"
prereqs()
{
     echo "$PREREQ"
}

case $1 in
prereqs)
     prereqs
     exit 0
     ;;
esac

. /scripts/functions

# step 1 - finding a filesystem labeled boot or IMD
boot_or_imd_parts () {
  # list partitions labeled IMD or boot - return an error if we find more than one
  line='' bootct=0 imdct=0
  wktmp=$(mktemp)
  blkid > "${wktmp}"
  while read -r line ; do
    case $line in
      *'LABEL="IMD"'*)  echo "${line%: *}:imd"  ; imdct=$(expr ${imdct} + 1)  ;;
      *'LABEL="boot"'*) echo "${line%: *}:boot" ; bootct=$(expr ${bootct} + 1) ;;
    esac
  done < "${wktmp}"
  rm "${wktmp}"
  [ "${imdct}"  -gt 2 ] && return 1
  [ "${bootct}" -gt 2 ] && return 1
  return 0
}

get_driveletter () {
  # return a drive letter match for mtools.conf
  MTOOLSRC="${MTOOLSRC:-/etc/mtools.conf}"
  src=$1 res=''
  res="$(awk -F= '$2 == "\"'"${src}"'\"" { split($1,d," ");print substr(d[2],1,1); }' "${MTOOLSRC}")"
  [ "${res}" ] || return 1
  echo "${res}"
}

# deps
command -v cryptsetup >/dev/null || exit 0
# hack in that new cryptsetup folds in cryptsetup-reencrypt
REENCRYPT="cryptsetup reencrypt"
command -v cryptsetup-reencrypt >/dev/null && REENCRYPT="cryptsetup-reencrypt"
command -v blkid >/dev/null || exit 0
command -v awk >/dev/null || exit 0
command -v mcopy >/dev/null || exit 0
command -v mktemp >/dev/null || exit 0
command -v date >/dev/null || exit 0
command -v od >/dev/null || exit 0
command -v dd >/dev/null || exit 0
command -v expr >/dev/null || exit 0
command -v tune2fs >/dev/null || exit 0
command -v resize2fs >/dev/null || exit 0
command -v grep >/dev/null || exit 0
command -v cat >/dev/null || exit 0
command -v echo >/dev/null || exit 0
command -v rm >/dev/null || exit 0
command -v xargs >/dev/null || exit 0
command -v sfdisk >/dev/null || exit 0
command -v readlink >/dev/null || exit 0
command -v basename >/dev/null || exit 0

for arg in $(cat /proc/cmdline) ; do
  case "${arg}" in
    luksipc=*)
      srcdev="${arg#luksipc=}"
    ;;
  esac
done

[ "${srcdev}" ] || exit 0

case "${srcdev}" in
  /*)
    srcdev="${ROOT}"
   ;;
  *=*)
    lsbk=$(echo "${srcdev}" | awk -F= '{ print $1 }')
    lsbv=$(echo "${srcdev}" | awk -F= '{ gsub(/"/, "", $2) ; print $2 }')
    srcdev=$(blkid | awk -F: '$2 ~ "'"${lsbk}"'=\"'"${lsbv}"'\"" { print $1 }')
   ;;
esac
baredev="$(basename "${srcdev}")"

dataland=''
partlist=$(mktemp)
boot_or_imd_parts > "${partlist}"
grep -q ':imd$' "${partlist}" && {
  dataland=$(grep ':imd$' "${partlist}")
}
grep -q ':boot$' "${partlist}" && {
  dataland=$(grep ':boot$' "${partlist}")
}
rm "${partlist}"

[ "${dataland}" ] || exit 0
dataland="${dataland%:*}"

drvletter="$(get_driveletter "${dataland}")"
[ "${drvletter}" ] || exit 0

devparent="$(basename "$(readlink -f "/sys/class/block/${baredev}/..")")"
read -r devpartno < "/sys/class/block/${baredev}/partition"

mkdir /run/cryptsetup
random=/dev/random
[ -f /dev/hwrng ] && random="/dev/hwrng"

log_begin_msg "luksipc: examining ${srcdev}"

for arg in $(blkid "${srcdev}") ; do
  case "${arg}" in
    'TYPE="ext4"')
      log_begin_msg "generating keyfile..."
        dd "if=${random}" of=/run/luksipc.key bs=1 count=32
        mcopy /run/luksipc.key "${drvletter}:luksipc.key"
      log_end_msg
      log_begin_msg "converting ${srcdev} to LUKS..."
        # hooo boy, direct fs block munge ;)
        fsdate="$(od -An -j 0x42c -N4 -tu4 < "${srcdev}" | xargs)"
        cdate="$(date +%s)"
        [ "${fsdate}" -gt "${cdate}" ] && date "--set=@${fsdate}"
        e2fsck -f "${srcdev}"
        resize2fs -M -p "${srcdev}"
        tune2fs_out="$(mktemp)"
        tune2fs -l "${srcdev}" | awk '-F: +' '$1 ~ /Block count|Block size|Filesystem UUID/ { split($1,v," ") ;print $2,v[2] }' > "${tune2fs_out}"
        while read -r line ; do
          case "${line}" in
            *UUID) fsuuid="$(echo "${line}" | awk '{ print $1 }')" ;;
            *count) blkct="$(echo "${line}" | awk '{ print $1 }')" ;;
            *size)  blksz="$(echo "${line}" | awk '{ print $1 }')" ;;
          esac
        done < "${tune2fs_out}"
        rm "${tune2fs_out}"
        blocks="$(expr "${blkct}" \* "${blksz}")"
	# this may be a program, or a program + argument.
	case "${REENCRYPT}" in
          cryptsetup-reencrypt)
            # you can combine options with cryptsetup-reencrypt to only encrypt the fs usage, but reduce the total size by 32M...
            $REENCRYPT "--device-size=${blocks}" --reduce-device-size=32M --new "${srcdev}" --key-file /run/luksipc.key
          ;;
          *)
            # personally? I *hate* the new cryptsetup checks.
            oh=67108864	# overhead space - 64MB (in bytes)
            # sfdisk only supports sectors, so calculate a new size with overhead, and turn it to those
            # but first, ask sfdisk what it *thinks* a sector is
            secsz="$(sfdisk -d "/dev/${devparent}" | awk '$1 == "sector-size:" { print $2 }')"
            npartsec="$(expr "$(expr "${blocks}" + "${oh}")" / "${secsz}")"
            printf ',%s\n' "${npartsec}" | sfdisk -N "${devpartno}" "/dev/${devparent}" # fine! make the partition _that big_!
            log_begin_msg "performing re-encrypt now. THIS MAKE TAKE UP TO AN HOUR. (and progress is currently broken)"
            # NOTE: progress and batch mode appear to be...exclusive, you get fuck all status.
            $REENCRYPT --batch-mode --progress-frequency 3 --reduce-device-size=32M --new "${srcdev}" --key-file /run/luksipc.key
            log_end_msg
            # put the partition table back to max size (...no, really!)
            printf ',+\n' | sfdisk -N "${devpartno}" "/dev/${devparent}"
            # tell cryptsetup/LUKS header
            cryptsetup resize "${srcdev}" --key-file /run/luksipc.key
          ;;
        esac
      log_end_msg
    ;;
    'TYPE="crypto_LUKS"')
      mcopy "${drvletter}:luksipc.key" /run
    ;;
  esac
done

luks_uuid="$(cryptsetup luksUUID "${srcdev}")"
cryptsetup luksOpen --key-file /run/luksipc.key "${srcdev}" "luks-${luks_uuid}"
cryp_fsdate="$(od -An -j 0x42c -N4 -tu4 < "/dev/mapper/luks-${luks_uuid}" | xargs)"
cdate="$(date +%s)"
[ "${cryp_fsdate}" -gt "${cdate}" ] && date "--set=@${cryp_fsdate}"
resize2fs -f "/dev/disk/by-uuid/${fsuuid}"

log_end_msg
